---
groups:
- name: bg-with-content-change-multi-job
  jobs:
  - init-space
  - undeploy-leftovers
  - normal-deployment
  - bg-no-action
  - bg-test-live-idle
  - bg-test-resume-bg
  - bg-test-live-app
  - bg-test-bg-no-confirm
  - bg-test-test-new-blue
  - bg-test-undeploy
  - bg-test-delete-space
- name: single-job-tests
  jobs:
  - build-docker-image
  - bg-content-change
  - run-sanity-check-test
  - run-multi-task-bg-content-change-test 
  
jobs:
- name: build-docker-image
  public: true
  serial: true
  plan:
  - aggregate: 
    - get: oqtests
      trigger: false #temp for debug
    - get: cliplugin
      trigger: true
  - task: prepare-docker-context
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository:  cloudfoundry/cli-ci}
      inputs:
      - name: oqtests
        path: "oq-test-git-repo"
      - name: cliplugin
        path: "cliplugin"
      run:
        path: 'bash'
        args: ["oq-test-git-repo/oq.tests/pipeline/prepare-docker-context.sh","cliplugin","github.com/SAP/cf-mta-plugin","oq-test-git-repo/oq.tests","output/context"]
      outputs:
      - name: "docker-context"
        path: "output"
  - put: test-env
    params:
      build: docker-context/context
      tag_as_latest: true
#Sanity check - single job, single task
- name: run-sanity-check-test
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true #should we run the OQs for each change in the test's code?
    - get: 15m  #Run every 15 minutes
      trigger: true
    - get: test-env
      trigger: false # if true, it will run whenever a new test content image is created :)
      passed: [build-docker-image]
      params:
        tag: latest
  - task: sanity-check-single-task
    image: test-env
    file: oqtests/oq.tests/test_scenarios/CF Tests/Sanity Check/single-task.yml
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
    on_failure:
      put: slack-alert
      params:
        text: |
          Oops, $BUILD_JOB_NAME OQ test failed:
          http://((ci-host))/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
          http://((ci-host))/builds/$BUILD_ID
        channel: ((slack-chanel))
#BG single job single task
- name: bg-content-change
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [build-docker-image]
      params:
        tag: latest
  - task: test-substep-1
    image: test-env
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/single-task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
    on_failure:
      put: slack-alert
      params:
        text: |
          Oops, $BUILD_JOB_NAME OQ test failed:
          http://((ci-host))/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
          http://((ci-host))/builds/$BUILD_ID
        channel: ((slack-chanel))
#BG - single job multiple tasks
- name: run-multi-task-bg-content-change-test
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [build-docker-image]
      params:
        tag: latest
  - task: init-space
    image: test-env
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/1InitSpace/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: undeploy-leftovers
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Undeploy MTA leftovers/task.yml"
    image: test-env
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: normal-deploy
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test Normal Deploy Blue content/task.yml"
    image: test-env
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: bg-deploy-no-action
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/BG Deploy Green with no action/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: test-both-apps
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test Live and Idle Apps/task.yml"
    image: test-env
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: resume-bg-deploy
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Resume BG deploy/task.yml"
    image: test-env
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: test-new-version
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test New Green Live App content/task.yml"
    image: test-env
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: bg-deploy-no-confirm
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/BG Deploy Blue no confirm/task.yml"
    image: test-env
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: test-new-version
    image: test-env
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test New Blue Live App content/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: undeploy
    image: test-env
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Undeploy MTA/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-sjmt
      RT: cf
  - task: delete-space
    image: test-env
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Delete Space/task.yml"
    on_failure:
      put: slack-alert
      params:
        text: |
          Oops, $BUILD_JOB_NAME OQ test failed:
          http://((ci-host))/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
          http://((ci-host))/builds/$BUILD_ID
        channel: ((slack-chanel))

#BG-multiple jobs, single task each
- name: init-space
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [build-docker-image]
      params:
        tag: latest
  - task: test-substep-1
    file: 'oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/1InitSpace/task.yml'
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: undeploy-leftovers
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [init-space]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Undeploy MTA leftovers/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: normal-deployment
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [undeploy-leftovers]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test Normal Deploy Blue content/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-no-action
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [normal-deployment]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/BG Deploy Green with no action/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-live-idle
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [bg-no-action]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test Live and Idle Apps/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-resume-bg
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [bg-test-live-idle]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Resume BG deploy/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-live-app
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [bg-test-resume-bg]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test New Green Live App content/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-bg-no-confirm
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [ bg-test-live-app]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/BG Deploy Blue no confirm/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-test-new-blue
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [bg-test-bg-no-confirm]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Test New Blue Live App content/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-undeploy
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [ bg-test-test-new-blue]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Undeploy MTA/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
- name: bg-test-delete-space
  plan:
  - aggregate: 
    - get: oqtests
    - get: test-env
      trigger: true # let's run whenever a new test content image is created :)
      passed: [ bg-test-undeploy]
      params:
        tag: latest
  - task: test-substep-1
    file: "oqtests/oq.tests/test_scenarios/CF Tests/Blue Green with Content Change/Delete Space/task.yml"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      SPACE_PREFIX: oqpoc-mjst
      RT: cf
      
  
resources:
- name: oqtests
  type: git
  source:
    uri: https://github.com/ddonchev/cf-mta-deploy-service.git
    branch: oq_poc
    skip_ssl_verification: true

- name: cliplugin
  type: git
  source:
     uri: https://github.com/ddonchev/cf-mta-plugin.git
     branch: master
     skip_ssl_verification: true

- name: test-env
  type: docker-image
  source:
     repository: registry:5000/mta-test-image
     insecure_registries: [ "registry:5000" ]

- name: 15m
  type: time
  source: {interval: 15m}
- name: slack-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest