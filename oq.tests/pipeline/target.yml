---
groups:
- name: single-job-tests
  jobs:
  - build-docker-image
  - update-deploy-service
  
jobs:
- name: build-docker-image
  public: true
  serial: true
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true
    - get: cliplugin
      trigger: true
  - task: prepare-docker-context
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository:  cloudfoundry/cli-ci}
      inputs:
      - name: oqtests
        path: "oq-test-git-repo"
      - name: cliplugin
        path: "cliplugin"
      run:
        path: 'bash'
        args: ["oq-test-git-repo/oq.tests/pipeline/prepare-docker-context.sh","cliplugin","github.com/SAP/cf-mta-plugin","oq-test-git-repo/oq.tests","output/context"]
      outputs:
      - name: "docker-context"
        path: "output"
  - task: prepare-xs-cli-context
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: openjdk}
      inputs:
        - name: "docker-context"
          path: "output"
      run:
        path: "bash"
        args:
          - "-c"
          - |
            echo "This is just a test"
            ls -a -l java
            env
            echo $PATH
            which java
            
            cp -rv $JAVA_HOME output/context/
            ls -l -a "output/context"
            cp -rvL output/context/* new-output/
            cd new-output/
            pwd
            ls -a -l
      outputs:
        - name: "new-output"
        # TODO: copy the content of the old input to a new folder and pass that folder as a build arg of the test-environemnt-image
      # TODO: export the java location in the context folder
      # in the docker image add logic which exports the PATH using the java location
  - put: test-environment-image
    params:
      build: new-output
      tag_as_latest: true
#Sanity check - single job, single task
- name: update-deploy-service
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true #This should be done on new version of SNAPSHOT in the maven project
    - get: test-environment-image
      trigger: false # if true, it will run whenever a new test content image is created :)
      passed: [build-docker-image]
      params:
        tag: latest
  - task: update-deploy-service-task
    # image: test-environment-image
    # file: "oqtests/oq.tests/test_scenarios/XS Tests/update-deploy-service-task.yml"
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            echo "${RT} login -a ${RT_API_ENDPOINT} -u ${USER_NAME} -p ${USER_PASS} --skip-ssl-validation -o ${ORG_NAME} -s ${SPACE_PREFIX}${SPACE_NAME}"
            #TODO: use the update-deploy-service script generated from the crawler
            #bash "/workspace/test_scenarios/CF Tests/Blue Green with Content Change/1InitSpace/run.sh"
            echo "Calling path..."
            echo $PATH
            # export PATH="$PATH :/test-environment-image/rootfs/workspace/xs/bin"
            echo "calling which xs"
            which xs
            xs login -a ${RT_API_ENDPOINT} -u ${USER_NAME} -p ${USER_PASS} -o ${ORG_NAME} -s ${DEFAULT_SPACE} --skip-ssl-validation

            bash "/workspace/test_scenarios/XS Tests/Update Deploy Service/run.sh"
            # ${RT} target
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      # DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      DEPLOY_SERVICE_DIR: /workspace/deploy-service-dir
      XS_DEPLOY_SNAPSHOTS_URL: http://nexus.wdf.sap.corp:8081/nexus/content/repositories/build.snapshots/com/sap/cloud/lm/sl/xs2/com.sap.cloud.lm.sl.xs2.web/
      RT: xs
    # on_failure: 
      # put: slack-alert
      # params:
      #   text: |
      #     Oops, $BUILD_JOB_NAME OQ test failed:
      #     http://((ci-host))/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
      #     http://((ci-host))/builds/$BUILD_ID
      #   channel: ((slack-chanel))
  - task: update-deploy-service-cli-plugins-task
    # file: "oqtests/oq.tests/test_scenarios/XS Tests/update-deploy-service-task.yml"
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            echo "Calling path..."
            echo $PATH
            echo "calling which xs"
            which xs
            # xs login -a ${RT_API_ENDPOINT} -u ${USER_NAME} -p ${USER_PASS} -o ${ORG_NAME} -s ${DEFAULT_SPACE} --skip-ssl-validation

            bash "/workspace/test_scenarios/XS Tests/Update CF CLI Plugins/run.sh"
            # ${RT} target
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      # DEPLOY_SERVICE_HOST: ((DEPLOY_SERVICE_HOST))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      DEPLOY_SERVICE_DIR: /workspace/deploy-service-dir
      XS_DEPLOY_SNAPSHOTS_URL: http://nexus.wdf.sap.corp:8081/nexus/content/repositories/build.snapshots/com/sap/cloud/lm/sl/xs2/com.sap.cloud.lm.sl.xs2.web/
      RT: xs
    # on_failure: 
      # put: slack-alert
      # params:
      #   text: |
      #     Oops, $BUILD_JOB_NAME OQ test failed:
      #     http://((ci-host))/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
      #     http://((ci-host))/builds/$BUILD_ID
      #   channel: ((slack-chanel))
resources:
- name: oqtests
  type: git
  source:
    uri: https://github.com/enchobelezirev/concourse.git
    branch: master
    skip_ssl_verification: true

- name: cliplugin
  type: git
  source:
     uri: https://github.com/SAP/cf-mta-plugin.git
     branch: master
     skip_ssl_verification: true
    
- name: test-environment-image
  type: docker-image
  source:
     repository: registry:5000/mta-test-image
     insecure_registries: [ "registry:5000" ]

