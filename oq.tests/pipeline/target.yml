---
groups:
- name: single-job-tests
  jobs:
  - build-docker-image
  - update-deploy-service
  - opaque-tokens-test
  
jobs:
- name: build-docker-image
  public: true
  serial: true
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true
    - get: cliplugin
      trigger: true
  - task: prepare-docker-context
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository:  cloudfoundry/cli-ci}
      inputs:
      - name: oqtests
        path: "oq-test-git-repo"
      - name: cliplugin
        path: "cliplugin"
      run:
        path: 'bash'
        args: ["oq-test-git-repo/oq.tests/pipeline/prepare-docker-context.sh","cliplugin","github.com/SAP/cf-mta-plugin","oq-test-git-repo/oq.tests","output/context"]
      outputs:
      - name: "docker-context"
        path: "output"
  - task: prepare-xs-cli-context
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: openjdk}
      inputs:
        - name: "docker-context"
          path: "output"
      run:
        path: "bash"
        args:
          - "-c"
          - |
            echo "This is just a test"
            ls -a -l java
            env
            echo $PATH
            which java
            
            cp -rv $JAVA_HOME output/context/
            ls -l -a "output/context"
            cp -rvL output/context/* new-output/
            cd new-output/
            pwd
            ls -a -l
      outputs:
        - name: "new-output"
  - put: test-environment-image
    params:
      build: new-output
      tag_as_latest: true

- name: update-deploy-service
  plan:
  - aggregate: 
    - get: oqtests
      trigger: true #This should be done on new version of SNAPSHOT in the maven project
    - get: test-environment-image
      trigger: false # if true, it will run whenever a new test content image is created :)
      passed: [build-docker-image]
      params:
        tag: latest
  - task: update-deploy-service-task
    # file: "oqtests/oq.tests/test_scenarios/XS Tests/update-deploy-service-task.yml"
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            echo "${RT} login -a ${RT_API_ENDPOINT} -u ${USER_NAME} -p ${USER_PASS} --skip-ssl-validation -o ${ORG_NAME} -s ${SPACE_PREFIX}${SPACE_NAME}"
            echo "Calling path..."
            echo $PATH
            echo "calling which xs"
            which xs
            xs login -a ${RT_API_ENDPOINT} -u ${USER_NAME} -p ${USER_PASS} -o ${ORG_NAME} -s ${DEFAULT_SPACE} --skip-ssl-validation

            bash "/workspace/test_scenarios/XS Tests/Update Deploy Service/run.sh"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      DEPLOY_SERVICE_DIR: /workspace/deploy-service-dir
      XS_DEPLOY_SNAPSHOTS_URL: http://nexus.wdf.sap.corp:8081/nexus/content/repositories/build.snapshots/com/sap/cloud/lm/sl/xs2/com.sap.cloud.lm.sl.xs2.web/
      RT: xs
    
  - task: update-deploy-service-cli-plugins-task
    # file: "oqtests/oq.tests/test_scenarios/XS Tests/update-deploy-service-task.yml"
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            echo "Calling path..."
            echo $PATH
            echo "calling which xs"
            which xs

            bash "/workspace/test_scenarios/XS Tests/Update CF CLI Plugins/run.sh"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: ((SPACE_NAME))
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      DEPLOY_SERVICE_DIR: /workspace/deploy-service-dir
      XS_DEPLOY_SNAPSHOTS_URL: http://nexus.wdf.sap.corp:8081/nexus/content/repositories/build.snapshots/com/sap/cloud/lm/sl/xs2/com.sap.cloud.lm.sl.xs2.cmd.assembly
      NEXUS_URL: http://nexus.wdf.sap.corp:8081/nexus/
      RT: xs
    

# Opaque tokens test
- name: opaque-tokens-test
  plan:
  - aggregate: 
    - get: oqtests
      trigger: false #This should be done on new version of SNAPSHOT in the maven project
    - get: test-environment-image
      trigger: true # if true, it will run whenever a new test content image is created :)
      passed: [update-deploy-service]
      params:
        tag: latest
  # - task: enable-opaque-tokens
  #   # file: "oqtests/oq.tests/test_scenarios/XS Tests/update-deploy-service-task.yml"
  #   image: test-environment-image
  #   config:
  #     platform: linux
  #     inputs:
  #       - name: oqtests
  #         path: "oq-test-git-repo"
  #     run:
  #       path: 'bash'
  #       args:
  #         - -c
  #         - |

  #           cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
  #           cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
          
  #           bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Enable Opaque Tokens/run.sh"
  #   params:
  #     TEST_WORKING_DIRECTORY: "/workspace"
  #     RT: xs
      # REPLACEMENT_XS_SCRIPT: "/workspace/test_scenarios/XS Tests/Opaque Tokens/xs"
  - task: login-and-target-task
    # file: "oqtests/oq.tests/test_scenarios/XS Tests/update-deploy-service-task.yml"
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
      run:
        path: 'bash'
        args:
          - -c
          - |
            ls -a -l /workspace/xs/bin
            echo "Na maika ti v putkata..."
            current_dir=$(pwd)
            echo "Before copying the resource the location is..."
            echo $current_dir
            # cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            # cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            echo "After copying the resources the location is..."
            pwd
            cd $current_dir
            rm -rf login-dir && mkdir -pv login-dir
            env
            ls -a -l login-dir
            ${RT} target
            ${RT} apps
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Enable Opaque Tokens/run.sh" > /dev/null
            echo "Executing bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Login and Target/run.sh"..."
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Login and Target/run.sh"
            echo "ls -a -l login-dir"
            ls -a -l login-dir
            echo "Trying to do some magic with the xs script.."
            ${RT} oauth-token
            ${RT} apps
            ${RT} spaces
            echo "Executing bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Login and Target/run.sh"..."
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Login and Target/run.sh"
            ${RT} login -a ${RT_API_ENDPOINT} -u ${USER_NAME} -p ${USER_PASS} --skip-ssl-validation -o ${ORG_NAME} -s ${SPACE_NAME}
            echo "Trying to do some magic with the xs script.."
            ${RT} oauth-token
            ${RT} apps
            ${RT} spaces
            echo "ls -a -l login-dir"
            ls -a -l login-dir
            whoami
      outputs:
        - name: login-dir
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: opaque-tokens-test
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      RECREATE_SPACE: recreateSpace
      XSCLIENT_CONTEXTFILE: login-dir/config
      RT: xs
      REPLACEMENT_XS_SCRIPT: "/workspace/test_scenarios/XS Tests/Opaque Tokens/xs"
  
  - task: test-deploy
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
        - name: login-dir
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            
            env
           
            chmod a+x login-dir
            chmod a+x login-dir/*
            whoami
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Enable Opaque Tokens/run.sh"
             echo "ls -a -l login-dir"
            ls -a -l login-dir
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Deploy/run.sh"
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Deploy/run.sh"
            xs deploy ${MTAR_LOCATION}
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: opaque-tokens-test
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      RT: xs
      XSCLIENT_CONTEXTFILE: login-dir/config
      APP_LOCATION: "/workspace/test_resources/opaque-tokens-resources"
      EXPECTED_APPLICATIONS: ztana"
      MTAR_LOCATION: "/workspace/test_resources/opaque-tokens-resources/anantz.mtar"
      
  - task: disable-opaque-tokens
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Disable Opaque Tokens/run.sh"
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      RT: xs

  - task: test-undeploy
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
        - name: login-dir
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scenarios /workspace/
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            bash "/workspace/test_scenarios/XS Tests/Opaque Tokens/Undeploy/run.sh"
            xs oauth-token
            xs undeploy anatz --delete-services --delete-service-brokers --do-not-fail-on-missing-permissions -f
    params:
      MTA_ID: anatz
      APP_LOCATION: "/workspace/test_resources/opaque-tokens-resources"
      TEST_WORKING_DIRECTORY: "/workspace"
      DEFAULT_ORG: ((DEFAULT_ORG))
      DEFAULT_SPACE: ((DEFAULT_SPACE))
      DEPLOY_SERVICE_URL: ((DEPLOY_SERVICE_URL))
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: opaque-tokens-test
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      XSCLIENT_CONTEXTFILE: login-dir/config
      RT: xs
  - task: delete-space
    image: test-environment-image
    config:
      platform: linux
      inputs:
        - name: oqtests
          path: "oq-test-git-repo"
        - name: login-dir
      run:
        path: 'bash'
        args:
          - -c
          - |
            cp -rv oq-test-git-repo/oq.tests/test_scripts /workspace/
            bash "oq-test-git-repo/oq.tests/test_scenarios/XS Tests/Opaque Tokens/Delete Space/run.sh"
            xs delete-space ${SPACE_NAME} -f
    params:
      TEST_WORKING_DIRECTORY: "/workspace"
      ORG_NAME: ((ORG_NAME))
      SPACE_NAME: opaque-tokens-test
      RT_API_ENDPOINT: ((RT_API_ENDPOINT))
      XSCLIENT_CONTEXTFILE: login-dir/config
      USER_NAME: ((USER_NAME))
      USER_PASS: ((USER_PASS))
      RT: xs
resources:
- name: oqtests
  type: git
  source:
    uri: https://github.com/enchobelezirev/concourse.git
    branch: master
    skip_ssl_verification: true

- name: cliplugin
  type: git
  source:
     uri: https://github.com/SAP/cf-mta-plugin.git
     branch: master
     skip_ssl_verification: true
    
- name: test-environment-image
  type: docker-image
  source:
     repository: registry:5000/mta-test-image
     insecure_registries: [ "registry:5000" ]

